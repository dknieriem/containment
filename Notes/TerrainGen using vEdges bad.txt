
using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using UnityEngine;

public class TerrainGen : MonoBehaviour {

    private const float defaultExtentX = 1.0f;
    private const float defaultExtentY = 1.0f;
    //private const float[] defaultExtent = { defaultExtentX, defaultExtentY };

    MeshFilter filter;
    UnityEngine.Mesh mesh;

    public float extentX = defaultExtentX;
    public float extentY = defaultExtentY;
    public string generator = "generateCoast";
    public int npts = 10; //16384;
    public int ncities = 15;
    public int nterrs = 5;

    public static Params defaultParams = new Params("generateCoast", 10, 15, 5, defaultExtentX, defaultExtentY); //16384

    public struct MapAndMesh
    {
        public Mesh mesh;
        public float[] h;
        public int[] downhill;

        public override string ToString()
        {
            string n = " | "; //System.Environment.NewLine;
            string output = "MapAndMesh: " + n;

            if(h != null)
            {
                output += "h: " + h.Length + n;
            } else
            {
                output += "h: null" + n;
            }
            
            if( downhill != null)
            {
                output += "downhill: " + downhill.Length + n;
            } else
            {
                output += "downhill: null" + n;
            }

            output += mesh.ToString();

            return output;
        }
    }

    public struct Mesh
    {
        public float[][] pts; //each pt is a cell, surrounded by a polygon from voronoi,
        public Delaunay.Voronoi voronoi;
        public List<Vector2> vxs; //each vx is a vertex in >= 1 voronoi polygon
        public Dictionary<Vector2, int> vxids;
        //public List<List<int>> adj;
        public Dictionary<Vector2, List<Vector2>> adj;
        //public List<List<int>> adjId;
        public Dictionary<int, List<int>> adjId;
        public List<Vector2[]> edges;
        public List<List<Vector2>> tris;
        public float extentX;
        public float extentY;

        public override string ToString()
        {
            string n = " | "; //System.Environment.NewLine;
            string output = "Mesh: " + n;

            output += "pts: " + pts.Length + n;
            output += "voronoi: " + voronoi.ToString() + n;
            output += "vxs: " + vxs.Count + n;
            output += "vxids: " + vxids.Count + n;
            output += "adj: " + adj.Count + n;
            output += "adjId: " + adjId.Count + n;
            output += "edges: " + edges.Count + n;
            output += "tris: " + tris.Count + n;
            
            return output;
        }

        public Mesh(float[][] inpts, Delaunay.Voronoi invor, List<Vector2> invxs, Dictionary<Vector2, int> invxids, Dictionary<Vector2, List<Vector2>> inadj, Dictionary<int, List<int>> inadjIds, List<List<Vector2>> intris, List<Vector2[]> inedges, float inextentX, float inextentY)
        {
            pts = inpts;
            voronoi = invor;
            vxs = invxs;
            vxids = invxids;
            adj = inadj;
            adjId = inadjIds;
            tris = intris;
            edges = inedges;
            extentX = inextentX;
            extentY = inextentY;
        }

        //public Mesh(float[][] inpts, Delaunay.Voronoi invor, List<float[]> invxs, Dictionary<Delaunay.Edge, List<Delaunay.Edge>> inadj, List<Delaunay.Triangle> intris, List<Delaunay.Edge> inedges, float inextentX, float inextentY)
        //{
        //    pts = inpts;
        //    voronoi = invor;
        //    vxs = invxs;
        //    adj = inadj;
        //    tris = intris;
        //    edges = inedges;
        //    extentX = inextentX;
        //    extentY = inextentY;
        //}
    }

    public struct Render
    {
        public Params p;
        public MapAndMesh h;
        //public List<List<int>> terr;
        public List<int> cities;

    }

    public struct Params
    {
        public float extentX;
        public float extentY;
        public string generator;
        public int npts; // = 16384;
        public int ncities;
        public int nterrs;

        public Params(string generatorIn, int nptsIn, int ncitiesIn, int nterrsIn, float extentInX = defaultExtentX, float extentInY = defaultExtentY)
        {
            extentX = extentInX;
            extentY = extentInY;
            generator = generatorIn;
            npts = nptsIn;
            ncities = ncitiesIn;
            nterrs = nterrsIn;
        }
    }

    public void Start()
    {
        filter = gameObject.GetComponent<MeshFilter>();
        mesh = filter.mesh;
        if(mesh == null)
        {
            mesh = new UnityEngine.Mesh();
            mesh.name = "Terrain Mesh";
        }
    }


    public void GenerateTerrain()
    {
        Params p = defaultParams;

        MapAndMesh h = generateCoast(p);
        ConvertMesh(h, mesh);
    }
    public TerrainGen(Params p)
    {
        Type t = this.GetType();
        MethodInfo method = t.GetMethod(p.generator);
        object[] o = { p };
        MapAndMesh h = (MapAndMesh) method.Invoke(this, o);
        ConvertMesh(h, mesh);
    }

    private void ConvertMesh(MapAndMesh h, UnityEngine.Mesh mesh)
    {
        int numVertices = h.h.Length;
        int numVx = h.mesh.vxs.Count;
        int numPts = h.mesh.pts.Length;
        int numEdges = h.mesh.edges.Count;

        Debug.Log(string.Format("h: {0}, v: {1}, p: {2}, e: {3}", numVertices, numVx, numPts, numEdges));

        Vector3[] vertices = new Vector3[h.h.Length];
        int p = 0;
        while (p < vertices.Length)
        {
            Vector2 pt2 = h.mesh.vxs[p];
            float height = h.h[p];
            //Debug.Log("New Vertex p =" + p +  ": " + pt2.ToString() + ", h: " + height);
            if (pt2.x == float.NegativeInfinity)
                pt2.x = - h.mesh.extentX;

            if (pt2.y == float.NegativeInfinity)
                pt2.y = -h.mesh.extentY;

            if (height > 1.0f)
                height = 1.0f;

            if (height < 0.0f)
                height = 0.0f;

            vertices[p] = new Vector3(pt2.x , pt2.y, height);
            p++;
        }

        mesh.Clear();
        mesh.vertices = vertices;
        //mesh.triangles = h.mesh.tris;
    }

    private float runif(float lo, float hi) {
        return UnityEngine.Random.Range(lo, hi); // * (hi - lo);
    }

    private float[] rnorm() {
       double x1 = 0;
       double x2 = 0;
       double w = 2.0f;
       while (w >= 1) {
           x1 = runif(-1, 1);
           x2 = runif(-1, 1);
           w = x1 * x1 + x2 * x2;
       }

        w = Math.Sqrt(-2 * Math.Log(w) / w);
        float[] vec = { (float) x1, (float) x2 };
        return vec;
    }
    
    private float[] randomVector(float scale) {

        float[] vec = rnorm();
        vec[0] *= scale;
        vec[1] *= scale;
        return vec;
    }



    public float[][] generatePoints(int n, float extentX = defaultExtentX, float extentY = defaultExtentY)
    {

        float[][] pts = new float[n][];
        for (int i = 0; i < n; i++) {
            float[] pt = { (UnityEngine.Random.Range(0.0f, 1.0f) - 0.5f) * extentX, (UnityEngine.Random.Range(0.0f, 1.0f) - 0.5f) * extentY };
            pts[i] = pt;
        }

        return pts;
    }

    //private float[] centroid( float[][] pts) {
    //    float x = 0;
    //    float y = 0;
    //    for (int i = 0; i < pts.Length; i++) {
    //        x += pts[i][0];
    //        y += pts[i][1];
    //    }

    //    float[] vec = { x / pts.Length, y / pts.Length };
    //    return vec;
    //}

    private float[][] improvePoints(float[][] pts, int n = 1, float extentX  = defaultExtentX, float extentY = defaultExtentY) {
        float epsilon = 1.0e-6f;
	    for (int k = 0; k < n; k++) {
            pts.Select(x => new float[] { Mathf.Round(x[0] / epsilon) * epsilon, Mathf.Round(x[1] / epsilon) * epsilon });
            Debug.Log("improvePoints round #" + k);
            //printPts(pts);


            int numPts = pts.Length;
            List<Vector2> Vecpts = new List<Vector2>(numPts);
            Vecpts = pts.Select(x => new Vector2(x[0], x[1])).ToList();
            List<uint> colors = new List<uint>(new uint[numPts]);
            //Debug.Log("improvePoints(). Colors: " + colors.Count());
            Delaunay.Voronoi v = new Delaunay.Voronoi(Vecpts, colors, new Rect(-extentX * 0.5f, -extentY * 0.5f, extentX, extentY));
            List<List<Vector2>> regions = v.Regions();
            //printVecs(regions);
            List<Vector2> centroids = regions.Select(r => centroid(r)).ToList();
            //printVec(centroids);
            pts = ConvertVecToFloat(centroids);

        }
        return pts;
    }

    float[][] ConvertVecToFloat(List<Vector2> vectors)
    {
        int numPts = vectors.Count;
        float[][] pts = new float[numPts][];

        for(int i =0; i < numPts; i++)
        {
            pts[i] = new float[] { vectors[i].x, vectors[i].y};
        }

        return pts;
    }

    List<Vector2> ConvertFloatToVec(float[][] floats)
    {
        int numPts = floats.Length;
        List<Vector2> vecs = new List<Vector2>(numPts);
        for(int i = 0; i < numPts; i++)
        {
            vecs[i] = new Vector2(floats[i][0], floats[i][1]);
        }

        return vecs;
    }

    void printVecs(List<List<Vector2>> vecArray)
    {
        for(int i = 0; i < vecArray.Count; i++)
        {
            Debug.Log(string.Format("vecArray[{0}]", i));
            printVec(vecArray[i]);
            Debug.Log("**********");
        }
    }

    void printVec(List<Vector2> vec)
    {
        for (int i = 0; i < vec.Count; i++)
        {
            Debug.Log(string.Format("( {0}, {1} )", vec[i].x, vec[i].y)); // vec.ToString());
        }
    }

    float[] centroid(List<float[]> polygon)
    {
        int i = -1;
        int n = polygon.Count;
        float x = 0;
        float y = 0;
        float[] a;
        float[] b = polygon[n - 1];
        float c;
        float k = 0;

        while (++i < n)
        {
            a = b;
            b = polygon[i];
            k += c = a[0] * b[1] - b[0] * a[1];
            x += (a[0] + b[0]) * c;
            y += (a[1] + b[1]) * c;
        }
        k *= 3;
        return new float[] { x / k, y / k };
    }

    Vector2 centroid(List<Vector2> polygon)
    {
        Vector2 result = new Vector2();
        int count = polygon.Count;
        foreach(Vector2 vector in polygon)
        {
            result += vector;
        }

        result /= count;

        return result;
    }
    public float[][] generateGoodPoints(int n, float extentX = defaultExtentX, float extentY = defaultExtentY) {

        float[][] pts = generatePoints(n, extentX, extentY);

        
        pts.OrderBy( x=> x[0]);
        Debug.Log("generateGoodPoints: ");
        //printPts(pts);

        return improvePoints(pts, 1, extentX, extentY);
    }

    public Mesh MakeMesh(float[][] pts, float extentX = defaultExtentX, float extentY = defaultExtentY) {

        int numPts = pts.Length;
        List<Vector2> Vecpts = new List<Vector2>(numPts);
        Vecpts = pts.Select(x => new Vector2(x[0], x[1])).ToList();
        List<uint> colors = new List<uint>(new uint[numPts]);
        Delaunay.Voronoi voronoi = new Delaunay.Voronoi(Vecpts, colors, new Rect(-extentX, -extentY, extentX * 2, extentY * 2));
        List<Delaunay.Site> sites = voronoi.getSites(); // List<Delaunay.Site>(numPts);
        
        List<List<Vector2>> polys = voronoi.Regions();
        List<Delaunay.Triangle> vTris = voronoi.Triangles();
        List<Delaunay.Edge> vEdges = voronoi.Edges();
        
        int numVertices = 2 + vEdges.Count - vTris.Count;

        int n = pts.Length;
        List<Vector2> vxs = new List<Vector2>(numVertices);//new Vector2[numVertices]);
        Dictionary<Vector2, int> vxids = new Dictionary<Vector2, int>(numVertices);
        Dictionary<Vector2, List<Vector2>> adj = new Dictionary<Vector2, List<Vector2>>(vEdges.Count);
        Dictionary<int, List<int>> adjId = new Dictionary<int, List<int>>(vEdges.Count);
        //List<List<int>> adjId = new List<List<int>>(new List<int>[vEdges.Count]);
        List<Vector2[]> edges = new List<Vector2[]>(new Vector2[vEdges.Count][]); 
        List<List<Vector2>> tris = new List<List<Vector2>>(new List<Vector2>[vTris.Count]);

        for (int i = 0; i < vEdges.Count; i++) {
            Delaunay.Edge e = vEdges[i]; //edge from leftVertex to rightVertex, the two points in pts it connects are leftSite and rightSite
            //Debug.Log("e: " + e.ToString());
            //if(e.rightVertex != null)
                //Debug.Log(", " + e.rightVertex.ToString());
            //Debug.Log("adjId[].Length: " + adjId.Count);
            if (e == null)
            {
                continue;
            }
            Vector2 e0 = Vector2.negativeInfinity;

            if(e.leftVertex != null)
                e0 = new Vector2(e.leftVertex.x, e.leftVertex.y);

            Vector2 e1 = Vector2.negativeInfinity;

            if (e.rightVertex != null)
                e1 = new Vector2(e.rightVertex.x, e.rightVertex.y);

            Vector2 leftSite = Vector2.negativeInfinity;

            if(e.leftSite != null)
                leftSite = new Vector2(e.leftSite.x, e.leftSite.y);

            Vector2 rightSite = Vector2.negativeInfinity;
            
            if(e.rightSite != null)
                rightSite = new Vector2(e.rightSite.x, e.rightSite.y);

            int e0id;
            if (vxids.ContainsKey(e0))
            {
                vxids.TryGetValue(e0, out e0id);
            } else
            {
                e0id = vxs.Count;
                vxids.Add(e0, e0id);
                vxs.Add(e0);
                adjId.Add(e0id, new List<int>());
                adj.Add(e0, new List<Vector2>());
            }

            int e1id;
            if (vxids.ContainsKey(e1)) // != null)
            {
                vxids.TryGetValue(e1, out e1id);//e1id = vxids[e1];
            } else
            {
                e1id = vxs.Count;
                vxids.Add(e1, e1id);
                vxs.Add(e1);
                adjId.Add(e1id, new List<int>());
                adj.Add(e1, new List<Vector2>());
            }

            //Debug.Log("checking adjId[" + e0id + "]");
            //Debug.Log("adjId.Count = " + adjId.Count);
            //Debug.Log("vxs.Count = " + vxs.Count);

            //if(e0id < adjId.Count )

            if (!adjId[e0id].Contains(e1id))
            {
                adjId[e0id].Add(e1id);
            }

            //Debug.Log("checking adjId[" + e1id + "]");
            //Debug.Log("adjId.Count = " + adjId.Count);

            if (!adjId[e1id].Contains(e0id))
            {
                adjId[e1id].Add(e0id);
            }

            //add each edge to adj of other
            if (!adj[e0].Contains(e1)){
                adj[e0].Add(e1);
            }

            if (!adj[e1].Contains(e0))
            {
                adj[e1].Add(e0);
            }
            
            Vector2[] newEdge = new Vector2[2];
            newEdge[0] = e0;
            newEdge[1] = e1;
            edges.Add(newEdge);

            while (tris.Count <= e0id || tris.Count <= e1id)
            {
                tris.Add(new List<Vector2>(3));
            }

            //Debug.Log("checking tris[" + e0id +" and " + e1id + "]");
            //Debug.Log("tris.Count = " + tris.Count);
            //Debug.Log("tris[e0id]: " + tris[e0id]);

            if (!tris.ElementAt(e0id).Contains(leftSite)) {
                tris.ElementAt(e0id).Add(leftSite);
            }
            if (e.rightSite != null && !tris.ElementAt(e0id).Contains(rightSite)) {
                tris.ElementAt(e0id).Add(rightSite);
            }
                
            if (!tris.ElementAt(e1id).Contains(leftSite)) {
                tris.ElementAt(e1id).Add(leftSite);
            }
            if (e.rightSite != null && !tris.ElementAt(e1id).Contains(rightSite)) {
                tris.ElementAt(e1id).Add(rightSite);
            }
        } //end for (int i = 0; i < voronoi.edges.Count(); i++) {

        Mesh mesh = new Mesh(pts, voronoi, vxs, vxids, adj, adjId, tris, edges, extentX, extentY);

        return mesh;
    } //end MakeMesh()

    public Mesh generateGoodMesh(int n, float extentX = defaultExtentX, float extentY = defaultExtentY) {

        float[][] pts = generateGoodPoints(n, extentX, extentY);
        Debug.Log("generateGoodMesh: ");
        //printPts(pts);
        return MakeMesh(pts, extentX, extentY);
    }

    public void printPts(float[][] pts)
    {
        if (pts == null)
            return;

        Debug.Log("Pts:");
        for(int i = 0; i < pts.Length; i++)
        {
            Debug.Log(string.Format("{0}: {1}, {2}", i, pts[i][0], pts[i][1]));
        }
    }

    void printH(float[] h)
    {
        if (h == null)
            return;

        Debug.Log("H:");
        for (int i = 0; i < h.Length; i++)
        {
            Debug.Log(string.Format("{0}: {1}", i, h[i]));
        }
    }

    public bool isedge(Mesh mesh, int i) {
        List<int> vxAdj;// = new List<int>();
        if(mesh.adjId.TryGetValue(i, out vxAdj))
        {
            return (vxAdj.Count < 3);
        } else
        {
            return false; //vx has 0 adj
        }
            //.ElementAt(i).Count < 3);
    }

    private bool isnearedge(Mesh mesh, int i) {
        float x = mesh.vxs[i].x;
        float y = mesh.vxs[i].y;
        float w = mesh.extentX;
        float h = mesh.extentY;
        return x < -0.45f * w || x > 0.45f * w || y < -0.45f * h || y > 0.45f * h;
    }

    private List<int> neighbours(Mesh mesh, int index) {

        List<int> onbs;
        bool found = mesh.adjId.TryGetValue(index, out onbs);
        List<int> nbs = new List<int>();
        if (found)
        {
            for (int i = 0; i < onbs.Count; i++)
            {
                nbs.Add(onbs[i]);
            }
        } else
        {
            Debug.Log("neighbours(): " + mesh.ToString());
            Debug.Log("Looking for adjId[" + index + "]");
            Debug.Log("Not Found!");
        }
        
        return nbs;
    }

    float distance(Mesh mesh, int i, int j) {
        Vector2 p = mesh.vxs[i];
        Vector2 q = mesh.vxs[j];
        return Vector2.Distance(p, q); // (float) Math.Sqrt((p[0] - q[0]) * (p[0] - q[0]) + (p[1] - q[1]) * (p[1] - q[1]));
    }

    float quantile(MapAndMesh h, float q) {
        float[] sortedh = new float[h.h.Length];
        for (int i = 0; i < h.h.Length; i++) {
            sortedh[i] = h.h[i];
        }
        Array.Sort(sortedh);
        h.h = sortedh;
        return bisectRight(sortedh, q, 0, 0);
    }

    private float bisectRight(float[] a, float x, int lo, int hi)
    {
        if (lo < 0)
        {
            lo = 0;
        }
        if (hi <= lo)
        {
            hi = a.Length - 1;
        }

        while (lo < hi)
        {
            int mid = lo + hi >> 1;
            if (a[mid] < x)
            {
                hi = mid;
            }
            else
            {
                lo = mid + 1;
            }
        }
        return lo;
    }

    private MapAndMesh zero(Mesh mesh) {
        //Debug.Log("zero()");
        MapAndMesh m = new MapAndMesh();
        m.mesh = mesh;
        float[] z = new float[mesh.vxs.Count];
        for (int i = 0; i < mesh.vxs.Count; i++) {
            z[i] = 0;
        }
        m.h = z;
        return m;
    }

    private MapAndMesh slope(Mesh mesh, float[] direction) {
        Debug.Log("slope()");
        MapAndMesh h = zero(mesh);
        //h.mesh = mesh;

        List<Vector2> vxs = mesh.vxs;
        float[] height = h.h;
        height = vxs.Select(v => {
            float h1 = v.x * direction[0] + v.y * direction[1];


            if (Math.Abs(h1) > 1 || h1 == Mathf.Infinity || h1 == Mathf.NegativeInfinity || float.IsNaN(h1))
            {
                Debug.Log(string.Format("slope->dir {0}, {1} h[{2}] = {3}", direction[0], direction[1], mesh.vxs.IndexOf(v), h1));
            }
            return h1; // v.x * direction[0] + v.y * direction[1];
        }).ToArray();

        h.h = height;
        return h;
    }

    private MapAndMesh slope(Mesh mesh, Vector2 direction)
    {
        Debug.Log("slope()");

        MapAndMesh h = zero(mesh);
        //h.mesh = mesh;

        List<Vector2> vxs = mesh.vxs;
        float[] height = h.h;
        height = vxs.Select(v => {
            float h1 = v.x * direction.x + v.y * direction.y;
            if (Math.Abs(h1) > 1 ||  h1 == Mathf.Infinity || h1 == Mathf.NegativeInfinity || float.IsNaN(h1))
            {
                Debug.Log(string.Format("slope->dir {0}, {1} h[{2}] ({3},{4}) = {5}", direction.x, direction.y, mesh.vxs.IndexOf(v), v.x, v.y, h1));
                Debug.Log("v = " +v.ToString());
            }
            return h1; // v.x * direction.x + v.y * direction.y;
        }).ToArray();

        h.h = height;
        return h;
    }

    private MapAndMesh cone(Mesh mesh, float slope) {
        Debug.Log("cone()");
        MapAndMesh h = zero(mesh);
        //h.mesh = mesh;

        List<Vector2> vxs = mesh.vxs;
        float[] height = h.h;
        height = vxs.Select(v => {
            return Mathf.Pow(v.x * v.x + v.y * v.y, 0.5f) * slope;
        }).ToArray();

        h.h = height;
        return h;
    }

    //dynamic map(h, f) {
    //    var newh = h.map(f);
    //    newh.mesh = h.mesh;
    //    return newh;
    //}

    private float[] normalize(float[] h) {
        float lo = h.Min();
        float hi = h.Max() - lo;
        return h.Select( k => { return (k - lo) / hi ; }).ToArray();
    }

    private MapAndMesh peaky(MapAndMesh h) {
        Debug.Log("peaky()");
        h.h = normalize(h.h);
        h.h.Select( k => Math.Sqrt(k));

        return h;
    }

    private MapAndMesh add(MapAndMesh[] maps) {
        Debug.Log("add()");
        Debug.Log("Maps: " + maps.Count());
        

        for (int j = 0; j < maps.Length; j++)
        {
            Debug.Log(j + ": " + maps[j].h.Length);
            printH(maps[j].h);
        }
            int n = maps[0].h.Count();
        MapAndMesh newvals = zero(maps[0].mesh);
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < maps.Length; j++) {
                newvals.h[i] += maps[j].h[i];
            }
        }
        return newvals;
    }

    private MapAndMesh mountains(Mesh mesh, int n, float r = 0.05f) {

        MapAndMesh m = zero(mesh);

        Debug.Log("mtns. mesh.vxs " + mesh.vxs.Count);

        List<float[]> mounts = new List<float[]>();

        for (int i = 0; i < n; i++) {
            mounts.Add( new float[] { mesh.extentX * UnityEngine.Random.Range(-0.5f, 0.5f), mesh.extentY * UnityEngine.Random.Range(-0.5f, 0.5f)  });
        }

        for (int i = 0; i < mesh.vxs.Count; i++) {
            Vector2 p = mesh.vxs[i];
            for (int j = 0; j < n; j++) {
                float[] mount = mounts[j];
                m.h[i] += Mathf.Pow(Mathf.Exp(-((p.x - mount[0]) * (p.x - mount[0]) + (p.y - mount[1]) * (p.y - mount[1])) / (2 * r * r)), 2);
            }
        }
        return m;
    }

    private MapAndMesh relax(MapAndMesh h) {

        MapAndMesh m = zero(h.mesh);

        for (int i = 0; i < m.h.Length; i++) {
            List<int> nbs = neighbours(h.mesh, i);
            if (nbs.Count() < 3) {
                m.h[i] = 0;
                continue;
            }
            m.h[i] = nbs.Select( j => { return m.h[j]; }).Average();
        }
        return m;
    }

    private int[] downhill(MapAndMesh h) {

        if (h.downhill != null) return h.downhill;

        int[] downs = new int[h.h.Length];
        for (int i = 0; i < h.h.Length; i++) {
            downs[i] = downfrom(i, h);
        }
        h.downhill = downs;
        return downs;
    }

    private int downfrom(int i, MapAndMesh h)
    {
        if (isedge(h.mesh, i)) return -2;
        int best = -1;
        float besth = h.h[i];
        List<int> nbs = neighbours(h.mesh, i);
        for (int j = 0; j < nbs.Count(); j++)
        {
            if (h.h[nbs[j]] < besth)
            {
                besth = h.h[nbs[j]];
                best = nbs[j];
            }
        }
        return best;
    }
    private void findSinks(MapAndMesh h) {
        int[] dh = downhill(h);
        int[] sinks = new int[dh.Length];
        for (int i = 0; i < dh.Length; i++) {
            int node = i;
            while (true) {
                if (isedge(h.mesh, node)) {
                    sinks[i] = -2;
                    break;
                }
                if (dh[node] == -1) {
                    sinks[i] = node;
                    break;
                }
                node = dh[node];
            }
        }
    }

    private MapAndMesh fillSinks(MapAndMesh h, float epsilon = 1e-5f) {

        Debug.Log("fillSinks()");
        float infinity = Mathf.Infinity;
        MapAndMesh newh = zero(h.mesh);
        for (int i = 0; i < h.h.Length; i++) {
            if (isnearedge(h.mesh, i)) {
                Debug.Log(string.Format("h[{0}] = {1} near edge", i, h.h[i]));
                newh.h[i] = h.h[i];
            } else {
                Debug.Log(string.Format("h[{0}] = {1} not near edge", i, h.h[i]));
                newh.h[i] = infinity;
            }
        }
        while (true) {
            bool changed = false;
            for (int i = 0; i < h.h.Length; i++) {
                if (newh.h[i] == h.h[i])
                {
                    continue;
                }
                List<int> nbs = neighbours(h.mesh, i);
                Debug.Log(string.Format("h[{0}].nbs = {1}", i,  nbs.Count));
                for (int j = 0; j < nbs.Count; j++) {
                    if (h.h[i] >= newh.h[nbs[j]] + epsilon) {
                        newh.h[i] = h.h[i];
                        changed = true;
                        break;
                    }
                    float oh = newh.h[nbs[j]] + epsilon;
                    if ((newh.h[i] > oh) && (oh > h.h[i])) {
                        newh.h[i] = oh;
                        changed = true;
                    }
                }
            }
            if (!changed) return newh;
        }
    }

    private MapAndMesh getFlux(MapAndMesh h) {

        Debug.Log("getFlux()");

        int[] dh = downhill(h);
        int[] idxs = new int[h.h.Length];

        MapAndMesh flux = zero(h.mesh); 

        for (int i = 0; i < h.h.Length; i++) {
            idxs[i] = i;
            flux.h[i] = 1/h.h.Length;
        }
        idxs.OrderByDescending(x => h.h[x]);

        for (int i = 0; i < h.h.Length; i++) {
            int j = idxs[i];
            if (dh[j] >= 0) {
                flux.h[dh[j]] += flux.h[j];
            }
        }
        return flux;
    }

    private MapAndMesh getSlope(MapAndMesh h) {

        Debug.Log("getSlope()");
        //int[] dh = 
        downhill(h);
        MapAndMesh slope = zero(h.mesh);
        for (int i = 0; i < h.h.Length; i++) {
            float[] s = trislope(h, i);
            slope.h[i] = Mathf.Sqrt(s[0] * s[0] + s[1] * s[1]);
            continue;

            //if (dh[i] < 0) {
            //    slope.h[i] = 0;
            //} else {
            //    slope.h[i] = (h.h[i] - h.h[dh[i]]) / distance(h.mesh, i, dh[i]);
            //}
        }

        return slope;
    }

    private MapAndMesh erosionRate(MapAndMesh h) {

        Debug.Log("erosionRate");

        MapAndMesh flux = getFlux(h);
        MapAndMesh slope = getSlope(h);
        MapAndMesh newh = zero(h.mesh);
        for (int i = 0; i < h.h.Length; i++) {
            float river = Mathf.Sqrt(flux.h[i]) * slope.h[i];
            float creep = slope.h[i] * slope.h[i];
            float total = 1000 * river + creep;
            total = total > 200 ? 200 : total;
            newh.h[i] = total;
        }
        return newh;
    }

    private MapAndMesh erode(MapAndMesh h, float amount) {
        Debug.Log("erode()");
        MapAndMesh er = erosionRate(h);
        MapAndMesh newh = zero(h.mesh);
        float maxr = er.h.Max();
        for (int i = 0; i < h.h.Length; i++) {
            newh.h[i] = h.h[i] - amount * (er.h[i] / maxr);
        }
        return newh;
    }

    MapAndMesh doErosion(MapAndMesh h, float amount, int n = 1) {
        Debug.Log("doErosion()");
        h = fillSinks(h);
        for (int i = 0; i < n; i++) {
            h = erode(h, amount);
            h = fillSinks(h);
        }
        return h;
    }

    MapAndMesh setSeaLevel(MapAndMesh h, float q) {
        Debug.Log("setSeaLevel()");
        MapAndMesh newh = zero(h.mesh);
        float delta = quantile(h, q);
        for (int i = 0; i < h.h.Length; i++) {
            newh.h[i] = h.h[i] - delta;
        }
        return newh;
    }

    MapAndMesh cleanCoast(MapAndMesh h, int iters) {
        Debug.Log("cleanCoast()");
        for (int iter = 0; iter < iters; iter++) {
            int changed = 0;
            MapAndMesh newh = zero(h.mesh);
            for (int i = 0; i < h.h.Length; i++) {
                newh.h[i] = h.h[i];
                List<int> nbs = neighbours(h.mesh, i);
                if (h.h[i] <= 0 || nbs.Count() != 3) continue;
                int count = 0;
                float best = -999999;
                for (int j = 0; j < nbs.Count(); j++) {
                    if (h.h[nbs[j]] > 0) {
                        count++;
                    } else if (h.h[nbs[j]] > best) {
                        best = h.h[nbs[j]];    
                    }
                }
                if (count > 1) continue;
                newh.h[i] = best / 2;
                changed++;
            }

            h = newh;
            newh = zero(h.mesh);
            for (int i = 0; i < h.h.Length; i++) {
                newh.h[i] = h.h[i];
                List<int> nbs = neighbours(h.mesh, i);
                if (h.h[i] > 0 || nbs.Count() != 3) continue;
                int count = 0;
                float best = 999999;
                for (int j = 0; j < nbs.Count(); j++) {
                    if (h.h[nbs[j]] <= 0) {
                        count++;
                    } else if (h.h[nbs[j]] < best) {
                        best = h.h[nbs[j]];
                    }
                }
                if (count > 1) continue;
                newh.h[i] = best / 2;
                changed++;
            }

            h = newh;
        }
        return h;
    }

    private float[] trislope(MapAndMesh h, int i) {

        List<int> nbs = neighbours(h.mesh, i);
        if (nbs.Count != 3) {
            float[] retu = { 0.0f, 0.0f };
            return retu;
        }

        Vector2 p0 = h.mesh.vxs[nbs[0]];
        Vector2 p1 = h.mesh.vxs[nbs[1]];
        Vector2 p2 = h.mesh.vxs[nbs[2]];

        float x1 = p1.x - p0.x;
        float x2 = p2.x - p0.x;
        float y1 = p1.y - p0.y;
        float y2 = p2.y - p0.y;

        float det = x1 * y2 - x2 * y1;
        float h1 = h.h[nbs[1]] - h.h[nbs[0]];
        float h2 = h.h[nbs[2]] - h.h[nbs[0]];

        float[] ret = {(y2 * h1 - y1 * h2) / det,
                (-x2 * h1 + x1 * h2) / det };
        if(Math.Abs(ret[0] + ret[1]) > 10)
        {
            Debug.Log(string.Format("vxs[{0}].ret = ({1}, {2})", i, ret[0], ret[1]));
        }

        return ret; 
    }

    private MapAndMesh cityScore(MapAndMesh h, List<int> cities) {

        Debug.Log("cityScore()");
        MapAndMesh score = getFlux(h);
        score.h.Select(x => Mathf.Sqrt(x));

        for (int i = 0; i < h.h.Length; i++) {
            if (h.h[i] <= 0 || isnearedge(h.mesh, i)) {
                score.h[i] = -999999;
                continue;
            }
        score.h[i] += 0.01f / (1e-9f + Math.Abs(h.mesh.vxs[i][0]) - h.mesh.extentX / 2);
        score.h[i] += 0.01f / (1e-9f + Math.Abs(h.mesh.vxs[i][1]) - h.mesh.extentY / 2);
            for (int j = 0; j < cities.Count(); j++) {
                score.h[i] -= 0.02f / (distance(h.mesh, cities[j], i) + 1e-9f);
            }
        }
        return score;
    }
    private void placeCity(Render render) {

        if (render.cities == null)
        {
            render.cities = new List<int>();
        }
            
        MapAndMesh score = cityScore(render.h, render.cities);
        float max = score.h.Max();
        int newcity = Array.IndexOf(score.h, max); //d3.scan(score.h, d3.descending); //get index of max(score.h[])
        render.cities.Add(newcity);
    }

    private void placeCities(Render render) {
        Params p = render.p;
        
        int n = p.ncities;
        for (int i = 0; i < n; i++) {
            placeCity(render);
        }
    }

    //List<List<int>> contour(MapAndMesh h, float level = 0.0f) {

    //    List<object[]> edges = new List<object[]>();

    //    for (int i = 0; i < h.mesh.edges.Count; i++) {
    //        object[] e = h.mesh.edges[i];
    //        if (e[3] == null) continue;
    //        if (isnearedge(h.mesh, (int) e[0]) || isnearedge(h.mesh, (int) e[1])) continue;
    //        if ((h.h[(int)e[0]] > level && h.h[(int)e[1]] <= level) ||
    //            (h.h[(int)e[1]] > level && h.h[(int)e[0]] <= level)) {
    //            object[] newEdge = { e[2], e[3] };
    //            edges.Add( newEdge );
    //        }
    //    }
    //    return mergeSegments(edges);
    //}

    List<List<Vector2>> getRivers(MapAndMesh h, float limit) {

        int[] dh = downhill(h);
        MapAndMesh flux = getFlux(h);
        List<List<Vector2>> links = new List<List<Vector2>>();
        int above = 0;
        for (int i = 0; i < h.h.Length; i++) {
            if (h.h[i] > 0) above++;
        }
        limit *= above / h.h.Length;
        for (int i = 0; i < dh.Length; i++) {
            if (isnearedge(h.mesh, i)) continue;
            if (flux.h[i] > limit && h.h[i] > 0 && dh[i] >= 0) {
                Vector2 up = h.mesh.vxs[i];
                Vector2 down = h.mesh.vxs[dh[i]];
                if (h.h[dh[i]] > 0) {
                    List<Vector2> newLink = new List<Vector2>(2);
                    newLink.Add(up);
                    newLink.Add(down);
                    links.Add(newLink);
                } else {
                    Vector2 down2 = new Vector2( (up[0] + down[0])/2, (up[1] + down[1])/2 );
                    List<Vector2> newLink = new List<Vector2>(2);
                    newLink.Add(up);
                    newLink.Add(down2);
                    links.Add(newLink);
                }
            }
        }

        return links; // mergeSegments(links).Select(x => relaxPath(x));
    }

    //todo: later
    //List<List<float[]>> mergeSegments(List<List<float[]>> segs) {

    //    List<List<float[]>> adj = new List<List<float[]>>();

    //    for (int i = 0; i < segs.Count; i++) {
    //        List<float[]> seg = segs[i];
    //        float[] seg0 = seg[0];
    //        float[] seg1 = seg[1];

    //        if (!adj.Contains(seg))
    //        {
    //            adj.Add(seg);
    //        }
  
    //    }

    //    bool[] done = new bool[segs.Count];
    //    List<List<float[]>> paths = new List<List<float[]>>();
    //    List<float[]> path = new List<float[]>();
    //        while (true) {
    //            if (path.Count() == 0) {
    //                for (int i = 0; i < segs.Count(); i++) {
    //                    if (done[i]) continue;
    //                    done[i] = true;
    //                path.Add(segs[i][0]);
    //                path.Add(segs[i][1]);
    //                break;
    //            }
    //            if (path.Count() == 0) break;
    //        }

    //        bool changed = false;
    //        for (int i = 0; i < segs.Count(); i++) {
    //            if (done[i]) continue;

    //            int count = adj.Select( x=> x.FindAll(path[0]).Count())
    //            if (adj[path[0]].Count() == 2 && segs[i][0] == path[0]) {
    //                path.Insert(0, segs[i][1]);
    //            } else if (adj[path[0]].Count() == 2 && segs[i][1] == path[0]) {
    //                path.Insert(0,segs[i][0]);
    //            } else if (adj[path[path.Count() - 1]].Count() == 2 && segs[i][0] == path[path.Count() - 1]) {
    //                path.Add(segs[i][1]);
    //            } else if (adj[path[path.Count() - 1]].Count() == 2 && segs[i][1] == path[path.Count() - 1]) {
    //                path.Add(segs[i][0]);
    //            } else {
    //                continue;
    //            }
    //            done[i] = true;
    //            changed = true;
    //            break;
    //        }
    //        if (!changed) {
    //            paths.Add(path);
    //            path = null;
    //        }
    //    }
    //    return paths;
    //}

    List<float[]> relaxPath(List<float[]> path) {
        List<float[]> newpath = new List<float[]>(path.Count()); // R[path[0]];
        newpath[0] = path[0];
        for (int i = 1; i < path.Count() - 1; i++) {
            float[] newpt = { 0.25f * path[i-1][0] + 0.5f * path[i][0] + 0.25f * path[i+1][0],
                         0.25f * path[i-1][1] + 0.5f * path[i][1] + 0.25f * path[i+1][1] };
            newpath[i] = newpt;
        }
        newpath[path.Count() - 1] = path[path.Count() - 1];

        return newpath;
    }

    MapAndMesh dropEdge(MapAndMesh h, int p = 4) {
        Debug.Log("dropEdge");
        MapAndMesh newh = zero(h.mesh);
        for (int i = 0; i < h.h.Length; i++) {
            Vector2 v = h.mesh.vxs[i];
            float x = 2.4f*v[0] / h.mesh.extentX;
            float y = 2.4f*v[1] / h.mesh.extentY;
            newh.h[i] = h.h[i] - Mathf.Exp(10*(Mathf.Pow(Mathf.Pow(x, p) + Mathf.Pow(y, p), 1/p) - 1));
        }
        return newh;
    }

    MapAndMesh generateCoast(Params p) {
        Debug.Log("generateCoast()");
        Mesh mesh = generateGoodMesh(p.npts, p.extentX, p.extentY);
        MapAndMesh step1 = slope(mesh, UnityEngine.Random.insideUnitCircle.normalized * 4); // randomVector(4));
        Debug.Log("Step 1:");
        printH(step1.h);
        
        MapAndMesh step2 = cone(mesh, runif(-1, -1));
        Debug.Log("Step 2:");
        printH(step2.h);
        MapAndMesh step3 = mountains(mesh, 50);
        Debug.Log("Step 3:");
        printH(step3.h);
        MapAndMesh[] steps = { step1, step2, step3 };

        MapAndMesh h = add(steps);
        Debug.Log("Added:");
        printH(h.h);

        for (int i = 0; i < 10; i++) {
            h = relax(h);
        }
        h = peaky(h);
        Debug.Log("Peaky:");
        printH(h.h);
        h = doErosion(h, runif(0, 0.1f), 5);
        Debug.Log("doErosion:");
        printH(h.h);
        h = setSeaLevel(h, runif(0.2f, 0.6f));
        Debug.Log("setSeaLevel:");
        printH(h.h);
        h = fillSinks(h);
        Debug.Log("fillSinks:");
        printH(h.h);
        h = cleanCoast(h, 3);
        Debug.Log("cleanCoast:");
        printH(h.h);

        return h;
    }

/*    float[] terrCenter(MapAndMesh h, terr, city, bool landOnly) {
        var x = 0;
        var y = 0;
        var n = 0;
        for (var i = 0; i < terr.length; i++) {
            if (terr[i] != city) continue;
            if (landOnly && h[i] <= 0) continue;
            x += terr.mesh.vxs[i][0];
            y += terr.mesh.vxs[i][1];
            n++;
        }
        return [x/n, y/n];
    }*/
}